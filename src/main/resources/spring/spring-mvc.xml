<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd"> 
         <description>Spring MVC Configuration</description>

	<!-- 扫描@Controller注解 -->
	<context:component-scan base-package="org.cj,org.security">
			<context:include-filter type="annotation"
					expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

  <mvc:annotation-driven>
      <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters> 
    </mvc:annotation-driven> 




    <!-- 配置视图解析器 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/page/" />
        <property name="suffix" value=".jsp" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
        <property name="viewClass"
            value="org.springframework.web.servlet.view.JstlView" />
    </bean>

    <!-- 设置静态资源的访问处理方式   方法一-->
    <!-- 在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，
    会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
    就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。
    (一般的web服务器的默认的静态文件存放位置在webapp的根路径下，如果不配置这个的话，在前台页面相对和绝对路径会访问不到静态资源位置，配置上这个前台页面的访问配置静态资源时候用相对路径访问资源)
    -->
<!--   <mvc:default-servlet-handler />  -->

 <!-- 设置静态资源的访问处理方式SpringMVC自己进行处理   方法二-->
 <!-- 对于/根目录下的文件，以及/META-INF/static/ 下的静态文件可以通过${ctx}/resources/XX进行访问 -->
<mvc:resources mapping="/resources/**" location="/static/" cache-period="31536000"/>
  <!-- 过滤掉对静态资源的拦截 -->  
   - <mvc:interceptors>
      <mvc:interceptor>
         <!--  <mvc:mapping path="/**/*"/>
          <mvc:exclude-mapping path="/**/fonts/*"/>
         <mvc:exclude-mapping path="/**/*.css"/>
         <mvc:exclude-mapping path="/**/*.js"/>
         <mvc:exclude-mapping path="/**/*.png"/>
         <mvc:exclude-mapping path="/**/*.gif"/>
         <mvc:exclude-mapping path="/**/*.jpg"/>
         <mvc:exclude-mapping path="/**/*.jpeg"/> -->
       <!--<mvc:exclude-mapping path="/**/*.html"/> -->
        <!-- 拦截所有URL中包含/user/的请求 -->
            <mvc:mapping path="/bootstrap"/>
         <bean class="org.interceptor.interceptor.VisitInterceptor"></bean>
     </mvc:interceptor>
 </mvc:interceptors>  -->
    
    
    
  <!-- 统一异常处理 -->
    <bean id="handlerExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 定义的默认错误处理页面 -->
        <property name="defaultErrorView" value="error"></property>
        <!-- 定义错误类型和对应的页面处理 列表 -->
        <property name="exceptionMappings">
            <props>
                <!-- 举个例子 -->
                <prop key="java.sql.SQLException">error/sql</prop>
            </props>
        </property>
    </bean>


 </beans> 